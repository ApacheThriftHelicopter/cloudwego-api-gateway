// Code generated by hertz generator.

package api

import (
	"context"
	"encoding/json"
	// "fmt"
	// "example_hertz_kitex/hertz/kitex_gen/student/management"
	// "example_hertz_kitex/hertz/kitex_gen/student/management/studentmanagement"

	api "example_hertz_kitex/hertz/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"github.com/cloudwego/kitex/pkg/generic"
    "github.com/cloudwego/kitex/client/genericclient"

	"github.com/cloudwego/kitex/client"
	etcd "github.com/kitex-contrib/registry-etcd"
)

// QueryStudent .
// @router student/query [GET]
func QueryStudent(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.QueryStudentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	jsonBytes, err := json.Marshal(req)
	if err != nil {
		panic(err)
	}
	jsonString := string(jsonBytes)

	r, err := etcd.NewEtcdResolver([]string{"127.0.0.1:2379"})
    if err != nil {
        panic(err)
    }

	// Parse IDL with Local Files
    // YOUR_IDL_PATH thrift file path, eg:./idl/example.thrift
    p, err := generic.NewThriftFileProvider("../idl/student_management.thrift")
    if err != nil {
        panic(err)
    }
    g, err := generic.JSONThriftGeneric(p)
    if err != nil {
        panic(err)
    }
    cli, err := genericclient.NewClient("student", g, client.WithResolver(r))
    if err != nil {
        panic(err)
    }

    resp, err := cli.GenericCall(ctx, "queryStudent", jsonString)
	if err != nil {
		panic(err)
	}

	c.JSON(consts.StatusOK, resp)

	// resp := new(api.QueryStudentResponse)

	// // Instantiate a kitex client to make rpc calls and request back-end services
	// kc, err := studentmanagement.NewClient("student", client.WithHostPorts("127.0.0.1:8888"))
	// if err != nil {
	// 	panic(err)
	// }

	// // reqRpc is a pointer to an instance of management.QueryStudentRequest, containing a Num string = req.Num
	// reqRpc := &management.QueryStudentRequest{
	// 	Num: fmt.Sprintf("%d", req.Num),
	// }

	// // Pass in the reqRpc to client.QueryStudent to get a respRpc
	// respRpc, err := kc.QueryStudent(ctx, reqRpc)
	// if err != nil {
	// 	panic(err)
	// }

	// if !respRpc.Exist {
	// 	resp := &api.QueryStudentResponse{
	// 		Msg: fmt.Sprintf("don't have the num: %d", req.Num),
	// 	}
	// 	c.JSON(consts.StatusBadRequest, resp)
	// 	return
	// }

	// resp := &api.QueryStudentResponse{
	// 	Num: respRpc.Num,
	// 	Name: respRpc.Name,
	// 	Gender: respRpc.Gender,
	// }
}

// InsertStudent .
// @router student/insert [POST]
func InsertStudent(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.InsertStudentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	jsonBytes, err := json.Marshal(req)
	if err != nil {
		panic(err)
	}
	jsonString := string(jsonBytes)

	r, err := etcd.NewEtcdResolver([]string{"127.0.0.1:2379"})
    if err != nil {
        panic(err)
    }

	// Parse IDL with Local Files
    // YOUR_IDL_PATH thrift file path, eg:./idl/example.thrift
    p, err := generic.NewThriftFileProvider("../idl/student_management.thrift")
    if err != nil {
        panic(err)
    }
    g, err := generic.JSONThriftGeneric(p)
    if err != nil {
        panic(err)
    }
    cli, err := genericclient.NewClient("student", g, client.WithResolver(r))
    if err != nil {
        panic(err)
    }
    
	resp, err := cli.GenericCall(ctx, "insertStudent", jsonString)
    if err != nil {
		panic(err)
	}

	c.JSON(consts.StatusOK, resp)
	
	// resp := new(api.InsertStudentResponse)

	// // Initialize a Kitex client
	// kc, err := studentmanagement.NewClient("student", client.WithHostPorts("127.0.0.1:8888"))
	// if err != nil {
	// 	panic(err)
	// }

	// // Convert the request received by the Hertz server to a request understood by the Kitex client
	// reqRpc := &management.InsertStudentRequest{
	// 	Num: req.Num,
	// 	Name: req.Name,
	// 	Gender: req.Gender,
	// }

	// respRpc, err := kc.InsertStudent(ctx, reqRpc)
	// if err != nil {
	// 	panic(err)
		
	// }

	// if !respRpc.Ok {
	// 	resp := &api.InsertStudentResponse{
	// 		Ok: respRpc.Ok,
	// 		Msg: respRpc.Msg,
	// 	}
	// 	c.JSON(consts.StatusBadRequest, resp)
	// 	return
	// }

	// resp := &api.InsertStudentResponse{
	// 	Ok: respRpc.Ok,
	// 	Msg: respRpc.Msg,
	// }
}
