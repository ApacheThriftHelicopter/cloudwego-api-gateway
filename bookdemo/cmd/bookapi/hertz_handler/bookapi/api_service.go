// Code generated by hertz generator.

package bookapi

import (
	"context"

	bookapi "github.com/ApacheThriftHelicopter/cloudwego-api-gateway/bookdemo/hertz_gen/bookapi"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateUser .
// @router /v1/user/register [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bookapi.CreateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(bookapi.CreateUserResponse)

	c.JSON(consts.StatusOK, resp)
}

// CheckUser .
// @router /v1/user/login [POST]
func CheckUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bookapi.CheckUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(bookapi.CheckUserResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateBook .
// @router /v1/book [POST]
func CreateBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bookapi.CreateBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(bookapi.CreateBookResponse)

	c.JSON(consts.StatusOK, resp)
}

// QueryBook .
// @router /v1/book/query [GET]
func QueryBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bookapi.QueryBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(bookapi.QueryBookResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateBook .
// @router /v1/book/:book_id [PUT]
func UpdateBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bookapi.UpdateBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(bookapi.UpdateBookResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteBook .
// @router /v1/book/:book_id [DELETE]
func DeleteBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bookapi.DeleteBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(bookapi.DeleteBookResponse)

	c.JSON(consts.StatusOK, resp)
}
