// Code generated by hertz generator.

package bookapi

import (
	"context"

	bookapi "github.com/ApacheThriftHelicopter/cloudwego-api-gateway/bookdemo/hertz_gen/bookapi"
	"github.com/ApacheThriftHelicopter/cloudwego-api-gateway/bookdemo/pkg/errno"
	"github.com/ApacheThriftHelicopter/cloudwego-api-gateway/bookdemo/pkg/constants"
	"github.com/ApacheThriftHelicopter/cloudwego-api-gateway/bookdemo/kitex_gen/user"
	"github.com/ApacheThriftHelicopter/cloudwego-api-gateway/bookdemo/kitex_gen/book"
	"github.com/ApacheThriftHelicopter/cloudwego-api-gateway/bookdemo/cmd/bookapi/rpc"
	"github.com/ApacheThriftHelicopter/cloudwego-api-gateway/bookdemo/cmd/bookapi/middleware"

	"github.com/cloudwego/hertz/pkg/app"
	// "github.com/cloudwego/hertz/pkg/protocol/consts"

	"github.com/cloudwego/hertz/pkg/common/utils"
)

// CreateUser .
// @router /v1/user/register [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	// var err error
	// var req bookapi.CreateUserRequest
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	// resp := new(bookapi.CreateUserResponse)

	// c.JSON(consts.StatusOK, resp)


	var err error
	var req bookapi.CreateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	err = rpc.CreateUser(context.Background(), &user.CreateUserRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// CheckUser .
// @router /v1/user/login [POST]
func CheckUser(ctx context.Context, c *app.RequestContext) {
	// var err error
	// var req bookapi.CheckUserRequest
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	// resp := new(bookapi.CheckUserResponse)

	// c.JSON(consts.StatusOK, resp)
	middleware.JwtMiddleware.LoginHandler(ctx, c)
}

// CreateBook .
// @router /v1/book [POST]
func CreateBook(ctx context.Context, c *app.RequestContext) {
	// var err error
	// var req bookapi.CreateBookRequest
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	// resp := new(bookapi.CreateBookResponse)

	// c.JSON(consts.StatusOK, resp)

	var err error
	var req bookapi.CreateBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(constants.IdentityKey)
	err = rpc.CreateBook(context.Background(), &book.CreateBookRequest{
		Title:   req.Title,
		Content: req.Content,
		UserId:  v.(*bookapi.User).UserID,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// QueryBook .
// @router /v1/book/query [GET]
func QueryBook(ctx context.Context, c *app.RequestContext) {
	// var err error
	// var req bookapi.QueryBookRequest
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	// resp := new(bookapi.QueryBookResponse)

	// c.JSON(consts.StatusOK, resp)

	var err error
	var req bookapi.QueryBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(constants.IdentityKey)
	books, total, err := rpc.QueryBooks(context.Background(), &book.QueryBookRequest{
		UserId:    v.(*bookapi.User).UserID,
		SearchKey: req.SearchKey,
		Offset:    req.Offset,
		Limit:     req.Limit,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, utils.H{
		constants.Total: total,
		constants.Books: books,
	})
}

// UpdateBook .
// @router /v1/book/:book_id [PUT]
func UpdateBook(ctx context.Context, c *app.RequestContext) {
	// var err error
	// var req bookapi.UpdateBookRequest
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	// resp := new(bookapi.UpdateBookResponse)

	// c.JSON(consts.StatusOK, resp)

	var err error
	var req bookapi.UpdateBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(constants.IdentityKey)
	err = rpc.UpdateBook(context.Background(), &book.UpdateBookRequest{
		BookId:  req.BookID,
		UserId:  v.(*bookapi.User).UserID,
		Title:   req.Title,
		Content: req.Content,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// DeleteBook .
// @router /v1/book/:book_id [DELETE]
func DeleteBook(ctx context.Context, c *app.RequestContext) {
	// var err error
	// var req bookapi.DeleteBookRequest
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	// resp := new(bookapi.DeleteBookResponse)

	// c.JSON(consts.StatusOK, resp)


	var err error
	var req bookapi.DeleteBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(constants.IdentityKey)
	err = rpc.DeleteBook(context.Background(), &book.DeleteBookRequest{
		BookId: req.BookID,
		UserId: v.(*bookapi.User).UserID,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}
