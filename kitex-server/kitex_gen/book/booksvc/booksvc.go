// Code generated by Kitex v0.5.2. DO NOT EDIT.

package booksvc

import (
	"context"
	book "github.com/ApacheThriftHelicopter/cloudwego-api-gateway/kitex-server/kitex_gen/book"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return bookSvcServiceInfo
}

var bookSvcServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BookSvc"
	handlerType := (*book.BookSvc)(nil)
	methods := map[string]kitex.MethodInfo{
		"queryBook":  kitex.NewMethodInfo(queryBookHandler, newBookSvcQueryBookArgs, newBookSvcQueryBookResult, false),
		"insertBook": kitex.NewMethodInfo(insertBookHandler, newBookSvcInsertBookArgs, newBookSvcInsertBookResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "book",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func queryBookHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*book.BookSvcQueryBookArgs)
	realResult := result.(*book.BookSvcQueryBookResult)
	success, err := handler.(book.BookSvc).QueryBook(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBookSvcQueryBookArgs() interface{} {
	return book.NewBookSvcQueryBookArgs()
}

func newBookSvcQueryBookResult() interface{} {
	return book.NewBookSvcQueryBookResult()
}

func insertBookHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*book.BookSvcInsertBookArgs)
	realResult := result.(*book.BookSvcInsertBookResult)
	success, err := handler.(book.BookSvc).InsertBook(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBookSvcInsertBookArgs() interface{} {
	return book.NewBookSvcInsertBookArgs()
}

func newBookSvcInsertBookResult() interface{} {
	return book.NewBookSvcInsertBookResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) QueryBook(ctx context.Context, req *book.QueryBookReq) (r *book.QueryBookResp, err error) {
	var _args book.BookSvcQueryBookArgs
	_args.Req = req
	var _result book.BookSvcQueryBookResult
	if err = p.c.Call(ctx, "queryBook", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InsertBook(ctx context.Context, req *book.InsertBookReq) (r *book.InsertBookResp, err error) {
	var _args book.BookSvcInsertBookArgs
	_args.Req = req
	var _result book.BookSvcInsertBookResult
	if err = p.c.Call(ctx, "insertBook", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
